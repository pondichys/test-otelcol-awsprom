mode: daemonset

replicaCount: 1

resources:
  limits:
    cpu: 200m
    memory: 250M

extraEnvs:
- name: AWS_ACCESS_KEY_ID
  valueFrom:
    secretKeyRef:
      name: amp-credentials
      key: aws_access_key_id

- name: AWS_SECRET_ACCESS_KEY
  valueFrom: 
    secretKeyRef:
      name: amp-credentials
      key: aws_secret_access_key

# Expose the node on which this pod is running through an environment variable
# This allows us to use a selector in the scrape configuration to restrict
# scraping to pods from the same node as the one on which the collector is running
- name: NODE_NAME
  valueFrom:
    fieldRef:
      fieldPath: spec.nodeName

clusterRole:
  create: true
  name: opentelemetry-collector
  rules: 
  - apiGroups:
    - ""
    resources:
    - nodes
    - nodes/metrics
    - services
    - endpoints
    - pods
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - extensions
    - networking.k8s.io
    resources:
    - ingresses
    verbs:
    - get
    - list
    - watch
  - nonResourceURLs:
    - /metrics
    - /metrics/cadvisor
    verbs:
    - get

  clusterRoleBinding:
    name: opentelemetry-collector

config:
  exporters:
    prometheusremotewrite:
      endpoint: https://aps-workspaces.eu-west-1.amazonaws.com/workspaces/ws-5381e2bb-e58c-4c43-8cc8-7d78cfdb5e31/api/v1/remote_write
      auth:
        authenticator: sigv4auth
  extensions:
    health_check: {}
    memory_ballast: {}
    sigv4auth:
      region: eu-west-1
      service: aps
  
  processors:
    batch: {}
    memory_limiter: null

  receivers:
    jaeger: null
    prometheus: 
      config:
        scrape_configs:
        - job_name: otel-collector
          scrape_interval: 15s
          static_configs:
          - targets: ['0.0.0.0:8888']
        
        - job_name: kubernetes-pods
          scrape_interval: 15s
          kubernetes_sd_configs:
          - role: pod
            selectors:
            - role: pod
              # only scrape data from pods running on the same node as collector
              field: "spec.nodeName=$NODE_NAME"

          relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            regex: true
            action: keep
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scheme]
            action: replace
            regex: (https?)
            target_label: __scheme__
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: (.+?)(\:\d+)?;(\d+)
            replacement: $$1:$$3
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)     
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name
          - source_labels: [__meta_kubernetes_pod_phase]
            regex: Pending|Succeeded|Failed
            action: drop
    zipkin: null
  
  service:
    extensions: 
    - health_check
    - memory_ballast
    - sigv4auth
    pipelines:
      logs: null
      metrics:
        receivers: 
        - prometheus
        processors: 
        - memory_limiter
        - batch
        exporters: 
        - prometheusremotewrite
      traces: null